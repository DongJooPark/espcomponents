<<: !include ../secrets.yaml

esphome:
  name: "${node_name}"

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .local
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${node_name} Fallback"
    password: !secret wifi_password

captive_portal:

text_sensor:
  - platform: version
    name: "${node_name} Version"
  - platform: wifi_info
    ip_address:
      name: "${node_name} IP"
      icon: mdi:ip-outline
    mac_address:
      name: "${node_name} MAC"
      icon: mdi:ethernet
    ssid:
      name: "${node_name} SSID"
      icon: mdi:wifi-lock
    bssid:
      name: "${node_name} BSSID"
      icon: mdi:router-wireless

sensor:
  - platform: uptime
    name: "${node_name} Uptime"
    filters:
      - lambda: return x / 3600;
    unit_of_measurement: "h"

  - platform: wifi_signal
    name: "${node_name} WiFi signal"
    icon: mdi:wifi-arrow-up-down
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
    id: wifi_sig

  - platform: template
    name: "${node_name} WiFi Quality"
    icon: "mdi:wifi"
    update_interval: 60s
    unit_of_measurement: '%'
    entity_category: "diagnostic"
    accuracy_decimals: 0
    lambda: !lambda |-
      float dBm = id(wifi_sig).state;
      if (isnan(dBm)) return -1;
      if (dBm <= -100) return 0;
      if (dBm >= -50) return 100;
      return round(2 * (dBm + 100));
      
binary_sensor:
  - platform: status
    name: "${node_name} Status"
    
switch:
  - platform: restart
    name: "${node_name} Restart"
    
  - platform: safe_mode
    name: "${node_name} Restart Safemode"
